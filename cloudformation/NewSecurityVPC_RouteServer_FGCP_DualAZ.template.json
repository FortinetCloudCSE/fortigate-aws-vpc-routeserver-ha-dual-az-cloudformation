{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v10.3) AWS CFT to deploy a dual AZ A-P solution integrated with VPC Route Server, repo: https://github.com/FortinetCloudCSE/fortigate-aws-vpc-routeserver-ha-dual-az-cloudformation",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "New VPC Configuration"
					},
					"Parameters": [
						"VPCCIDR",
						"AZForSubnet1",
						"AZForSubnet2",
						"PublicSubnet1",
						"PrivateSubnet1",
						"HAMgmtSubnet1",
						"PublicSubnet2",
						"PrivateSubnet2",
						"HAMgmtSubnet2",
						"TgwAttach",
						"TgwAttachSubnet1",
						"TgwAttachSubnet2"
					]
				},
				{
					"Label": {
						"default": "TGW Configuration"
					},
					"Parameters": [
						"TgwCreation",
						"TgwExisting",
						"TgwExistingSecurityTgwRtb",
						"TgwExistingSpokeTgwRtb",
						"TgwExistingSpokeTgwRtbRoute"
					]
				},
				{
					"Label": {
						"default": "Route Server Configuration"
					},
					"Parameters": [
						"RouteServerBgpAsn",
						"RouteServerPersistRoutes",
						"RouteServerPersistRoutesDuration",
						"RouteServerSNSNotification",
						"FgtBgpAsn",
						"RouteServerPeerLivenessDetection"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"InstanceType",
						"CIDRForInstanceAccess",
						"KeyPair",
						"EncryptVolumes",
						"OnlyPrivateEC2API",
						"FortiOSVersion",
						"LicenseType",
						"InitS3Bucket",
						"FortiGate1LicenseFile",
						"FortiGate2LicenseFile",
						"FortiGate1FortiFlexToken",
						"FortiGate2FortiFlexToken",
						"PublicSubnet1RouterIP",
						"PrivateSubnet1RouterIP",
						"HAMgmtSubnet1RouterIP",
						"PublicSubnet2RouterIP",
						"PrivateSubnet2RouterIP",
						"HAMgmtSubnet2RouterIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate 1"
					},
					"Parameters": [
						"FortiGate1PublicIP",
						"FortiGate1PrivateIP",
						"FortiGate1HAmgmtIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate 2"
					},
					"Parameters": [
						"FortiGate2PublicIP",
						"FortiGate2PrivateIP",
						"FortiGate2HAmgmtIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"RouteServerBgpAsn": {
			"Type": "Number",
			"Default": "64512",
			"MinValue": "1",
			"MaxValue": "4294967294",
			"Description": "Provide a BGP ASN for the VPC Route Server (1 - 4294967294)"
		},
		"RouteServerPersistRoutes": {
			"Type": "String",
			"Default": "disable",
			"Description": "Select 'enable' to allow routes to persisted after all BGP sessions are terminated.  Otherwise default is 'disable' to allow fastest failover",
			"AllowedValues": [
				"enable",
				"disable"
			]
		},
		"RouteServerPersistRoutesDuration": {
			"Type": "Number",
			"Default": "1",
			"MinValue": "1",
			"MaxValue": "5",
			"Description": "[Ignore if RouteServerPersistRoutes is disabled] Select the  number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB"
		},
		"RouteServerSNSNotification": {
			"Type": "String",
			"Default": "true",
			"Description": "Enable or disable publishing of BGP status changes to an SNS topic provisioned by AWS",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"FgtBgpAsn": {
			"Type": "Number",
			"Default": "65000",
			"MinValue": "1",
			"MaxValue": "4294967294",
			"Description": "Provide a BGP ASN for the FGTs (1 - 4294967294)"
		},
		"RouteServerPeerLivenessDetection": {
			"Type": "String",
			"Default": "bfd",
			"Description": "Select the liveness detection protocol (ie peer up/down status), BFD (RFC5880) or BGP-Keepalive (RFC4271). NOTE BGP is always used for sharing routes",
			"AllowedValues": [
				"bfd",
				"bgp-keepalive"
			]
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "Provide a network CIDR for the new VPC"
		},
		"AZForSubnet1": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for the first set of new subnets"
		},
		"AZForSubnet2": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for the second set of new subnets"
		},
		"PublicSubnet1": {
			"Type": "String",
			"Default": "10.0.1.0/24",
			"Description": "[Provide a network CIDR for PublicSubnet1"
		},
		"PrivateSubnet1": {
			"Type": "String",
			"Default": "10.0.2.0/24",
			"Description": "Provide a network CIDR for PrivateSubnet1"
		},
		"HAMgmtSubnet1": {
			"Type": "String",
			"Default": "10.0.3.0/24",
			"Description": "Provide a network CIDR for HAMgmtSubnet1"
		},
		"PublicSubnet2": {
			"Type": "String",
			"Default": "10.0.10.0/24",
			"Description": "Provide a network CIDR for PublicSubnet2"
		},
		"PrivateSubnet2": {
			"Type": "String",
			"Default": "10.0.20.0/24",
			"Description": "Provide a network CIDR for PrivateSubnet2"
		},
		"HAMgmtSubnet2": {
			"Type": "String",
			"Default": "10.0.30.0/24",
			"Description": "Provide a network CIDR for HAMgmtSubnet2"
		},
		"TgwAttach": {
			"Type": "String",
			"Description": "Select Yes if you plan to attach this VPC to Transit GW with a VPC attachment.  If Yes is selected 2 additional subnets and a route table will be created",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"TgwAttachSubnet1": {
			"Type": "String",
			"Default": "10.0.4.0/24",
			"Description": "Provide a network CIDR for TgwAttachSubnet1"
		},
		"TgwAttachSubnet2": {
			"Type": "String",
			"Default": "10.0.40.0/24",
			"Description": "Provide a network CIDR for TgwAttachSubnet2"
		},
		"TgwCreation": {
			"Type": "String",
			"Description": "Select Yes if you want to deploy a new Transit GW and two Transit GW Route Tables",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"TgwExisting": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide the Transit GW ID to create VPC routes to reach it"
		},
		"TgwExistingSecurityTgwRtb": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide the Transit GW RouteTable ID for the security VPC to associate to"
		},
		"TgwExistingSpokeTgwRtb": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide the Transit GW RouteTable ID that your spoke VPCs are associated with"
		},
		"TgwExistingSpokeTgwRtbRoute": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide a network CIDR to create a route in your Transit GW RouteTable that your spoke VPCs are associated with (ie 10.0.0.0/8 or 0.0.0.0/0)"
		},
		"PublicSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.1.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet1)"
		},
		"PrivateSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.2.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet1)"
		},
		"HAMgmtSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.3.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from HAMgmtSubnet1)"
		},
		"PublicSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.10.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet2)"
		},
		"PrivateSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.20.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet2)"
		},
		"HAMgmtSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.30.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from HAMgmtSubnet2)"
		},
		"FortiGate1PublicIP": {
			"Type": "String",
			"Default": "10.0.1.10/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate1 (IP from PublicSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate1PrivateIP": {
			"Type": "String",
			"Default": "10.0.2.10/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate1 (IP from PrivateSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate1HAmgmtIP": {
			"Type": "String",
			"Default": "10.0.3.10/24",
			"Description": "Provide the IP address in CIDR form for the ha management interface of FortiGate1 (IP from HAMgmtSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate2PublicIP": {
			"Type": "String",
			"Default": "10.0.10.10/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate2 (IP from PublicSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate2PrivateIP": {
			"Type": "String",
			"Default": "10.0.20.10/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate2 (IP from PrivateSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate2HAmgmtIP": {
			"Type": "String",
			"Default": "10.0.30.10/24",
			"Description": "Provide the IP address in CIDR form for the ha management interface of FortiGate2 (IP from HAMgmtSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"InstanceType": {
			"Type": "String",
			"Default": "c6i.xlarge",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.large",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge",
				"c6i.large",
				"c6i.xlarge",
				"c6i.2xlarge",
				"c6i.4xlarge",
				"c6i.8xlarge",
				"c6i.16xlarge",
				"c6i.24xlarge",
				"c6in.large",
				"c6in.xlarge",
				"c6in.2xlarge",
				"c6in.4xlarge",
				"c6in.8xlarge",
				"c6in.16xlarge",
				"c6g.large",
				"c6g.xlarge",
				"c6g.2xlarge",
				"c6g.4xlarge",
				"c6g.8xlarge",
				"c6g.16xlarge",
				"c6gn.large",
				"c6gn.xlarge",
				"c6gn.2xlarge",
				"c6gn.4xlarge",
				"c6gn.8xlarge",
				"c6gn.16xlarge",
				"c7g.large",
				"c7g.xlarge",
				"c7g.2xlarge",
				"c7g.4xlarge",
				"c7g.8xlarge",
				"c7g.16xlarge",
				"c7gn.large",
				"c7gn.xlarge",
				"c7gn.2xlarge",
				"c7gn.4xlarge",
				"c7gn.8xlarge",
				"c7gn.16xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiGate instances will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiGates"
		},
		"EncryptVolumes": {
			"Type": "String",
			"Description": "Select 'true' to encrypt the FortiGate instances OS and Log volumes with your account's KMS default master key for EBS.  Otherwise select false to leave unencrypted",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"OnlyPrivateEC2API": {
			"Type": "String",
			"Default": "False",
			"Description": "Select if only private EC2 API access is allowed for HAMgmt interfaces.  ***Note*** No EIP will be assigned to the HAMgmmt interfaces.  Login via the floating Cluster EIP or directly to each VM with the private IP of the HAMgmt interface.",
			"AllowedValues": [
				"True",
				"False"
			]
		},
		"InitS3Bucket": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank otherwise] Provide the Init S3 Bucket name, where your config files will be created. ***Note*** the bucket should exist in the same region as this deployment for successful bootstrapping"
		},
		"FortiOSVersion": {
			"Type": "String",
			"Default": "7.4.x",
			"Description": "Select the version of FortiOS to use (latest GA AMI will be used)",
			"AllowedValues": [
				"7.2.x",
				"7.4.x",
				"7.6.x"
			]
		},
		"LicenseType": {
			"Type": "String",
			"Description": "Select the license type for the FortiGates",
			"AllowedValues": [
				"BYOL",
				"Flex",
				"PAYG"
			]
		},
		"FortiGate1LicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank otherwise] Provide the name of the BYOL license file in the Init S3 Bucket for FortiGate1 (ie fgt1.lic or prefix/fgt1.lic)"
		},
		"FortiGate2LicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank otherwise] Provide the name of the BYOL license file in the Init S3 Bucket for FortiGate2 (ie fgt2.lic or prefix/fgt2.lic)"
		},
		"FortiGate1FortiFlexToken": {
			"Type": "String",
			"Description": "[Flex Only, leave blank otherwise] Provide the FortiFlex Token for FortiGate1 (ie 1A2B3C4D5E6F7G8H9I0J)"
		},
		"FortiGate2FortiFlexToken": {
			"Type": "String",
			"Description": "[Flex Only, leave blank otherwise] Provide the FortiFlex Token for FortiGate2 (ie 2B3C4D5E6F7G8H9I0J1K)"
		}
	},
	"Mappings": {
		"FortiOSIntelAMISearchString": {
			"7.2.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.2.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(7.2.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.2.*)*|2wqkpek696qhdeo7lbbjncqli"
			},
			"7.4.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.4.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(7.4.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.4.*)*|2wqkpek696qhdeo7lbbjncqli"
			},
			"7.6.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.6.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"Flex": "FortiGate-VM64-AWS *(7.6.*)*|dlaioq277sglm5mw1y1dmeuqa",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.6.*)*|2wqkpek696qhdeo7lbbjncqli"
			}
		},
		"FortiOSArmAMISearchString": {
			"7.2.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.2.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(7.2.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.2.*)*|8gc40z1w65qjt61p9ps88057n"
			},
			"7.4.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.4.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(7.4.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.4.*)*|8gc40z1w65qjt61p9ps88057n"
			},
			"7.6.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.6.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"Flex": "FortiGate-VMARM64-AWS *(7.6.*)*|33ndn84xbrajb9vmu5lxnfpjq",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.6.*)*|8gc40z1w65qjt61p9ps88057n"
			}
		}
	},
	"Conditions": {
		"EnableRouteServerPersistRoutes": {
			"Fn::Equals": [
				{
					"Ref": "RouteServerPersistRoutes"
				},
				"enable"
			]
		},
		"UseBFD": {
			"Fn::Equals": [
				{
					"Ref": "RouteServerPeerLivenessDetection"
				},
				"bfd"
			]
		},
		"CreateTgwAttachSubnets": {
			"Fn::Equals": [
				{
					"Ref": "TgwAttach"
				},
				"Yes"
			]
		},
		"RouteServerPropagationToPrivateSubnets": {
			"Fn::Equals": [
				{
					"Ref": "TgwAttach"
				},
				"No"
			]
		},
		"RouteServerPropagationToTgwAttachSubnets": {
			"Fn::Equals": [
				{
					"Ref": "TgwAttach"
				},
				"Yes"
			]
		},
		"CreateTgw": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "TgwCreation"
						},
						"Yes"
					]
				},
				{
					"Fn::Equals": [
						{
							"Ref": "TgwAttach"
						},
						"Yes"
					]
				}
			]
		},
		"ExistingTgw": {
			"Fn::And": [
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "TgwExisting"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Equals": [
						{
							"Ref": "TgwCreation"
						},
						"No"
					]
				}
			]
		},
		"CreateAttachments": {
			"Fn::Or": [
				{
					"Condition": "CreateTgw"
				},
				{
					"Condition": "ExistingTgw"
				}
			]
		},
		"ExistingTgwRoute": {
			"Fn::And": [
				{
					"Condition": "ExistingTgw"
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "TgwExistingSpokeTgwRtbRoute"
								},
								""
							]
						}
					]
				}
			]
		},
		"FortiFlex": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "LicenseType"
						},
						"Flex"
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate1FortiFlexToken"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate2FortiFlexToken"
								},
								""
							]
						}
					]
				}
			]
		},
		"BYOL": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "LicenseType"
						},
						"BYOL"
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate1LicenseFile"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate2LicenseFile"
								},
								""
							]
						}
					]
				}
			]
		},
		"Graviton": {
			"Fn::Or": [
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c6g"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c6gn"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c7g"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c7gn"
					]
				}
			]
		},
		"PrivateEC2API": {
			"Fn::Equals": [
				{
					"Ref": "OnlyPrivateEC2API"
				},
				"True"
			]
		},
		"PublicEC2API": {
			"Fn::Equals": [
				{
					"Ref": "OnlyPrivateEC2API"
				},
				"False"
			]
		}
	},
	"Resources": {
		"RouteServer": {
			"Type": "AWS::EC2::RouteServer",
			"Properties": {
				"AmazonSideAsn": {
					"Ref": "RouteServerBgpAsn"
				},
				"PersistRoutes": {
					"Ref": "RouteServerPersistRoutes"
				},
				"PersistRoutesDuration": {
					"Fn::If": [
						"EnableRouteServerPersistRoutes",
						{
							"Ref": "RouteServerPersistRoutesDuration"
						},
						{
							"Ref": "AWS::NoValue"
						}
					]
				},
				"SnsNotificationsEnabled": {
					"Ref": "RouteServerSNSNotification"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"RouteServer"
								]
							]
						}
					}
				]
			}
		},
		"RouterServerAssociation": {
			"Type": "AWS::EC2::RouteServerAssociation",
			"Properties": {
				"RouteServerId": {
					"Ref": "RouteServer"
				},
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"RouteServerPropagationPrivateSubnet": {
			"Type": "AWS::EC2::RouteServerPropagation",
			"Condition": "RouteServerPropagationToPrivateSubnets",
			"DependsOn": [
				"RouterServerAssociation",
				"SubnetRouteTableAssociation5",
				"SubnetRouteTableAssociation6"
			],
			"Properties": {
				"RouteServerId": {
					"Ref": "RouteServer"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"RouteServerPropagationTgwAttachSubnet": {
			"Type": "AWS::EC2::RouteServerPropagation",
			"Condition": "RouteServerPropagationToTgwAttachSubnets",
			"DependsOn": [
				"RouterServerAssociation",
				"SubnetRouteTableAssociation7",
				"SubnetRouteTableAssociation8"
			],
			"Properties": {
				"RouteServerId": {
					"Ref": "RouteServer"
				},
				"RouteTableId": {
					"Ref": "TgwAttachRouteTable"
				}
			}
		},
		"RouteServerEndpoint1": {
			"Type": "AWS::EC2::RouteServerEndpoint",
			"DependsOn": "RouterServerAssociation",
			"Properties": {
				"RouteServerId": {
					"Ref": "RouteServer"
				},
				"SubnetId": {
					"Ref": "PrivateSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"RouteServerEndpoint1"
								]
							]
						}
					}
				]
			}
		},
		"RouteServerEndpoint2": {
			"Type": "AWS::EC2::RouteServerEndpoint",
			"DependsOn": "RouterServerAssociation",
			"Properties": {
				"RouteServerId": {
					"Ref": "RouteServer"
				},
				"SubnetId": {
					"Ref": "PrivateSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"RouteServerEndpoint2"
								]
							]
						}
					}
				]
			}
		},
		"RouteServerPeer1": {
			"Type": "AWS::EC2::RouteServerPeer",
			"DependsOn": "RouterServerAssociation",
			"Properties": {
				"BgpOptions": {
					"PeerAsn": {
						"Ref": "FgtBgpAsn"
					},
					"PeerLivenessDetection": {
						"Ref": "RouteServerPeerLivenessDetection"
					}
				},
				"PeerAddress": {
					"Fn::GetAtt": [
						"Fgt1Eni1",
						"PrimaryPrivateIpAddress"
					]
				},
				"RouteServerEndpointId": {
					"Ref": "RouteServerEndpoint1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"RouteServerPeer1"
								]
							]
						}
					}
				]
			}
		},
		"RouteServerPeer2": {
			"Type": "AWS::EC2::RouteServerPeer",
			"DependsOn": "RouterServerAssociation",
			"Properties": {
				"BgpOptions": {
					"PeerAsn": {
						"Ref": "FgtBgpAsn"
					},
					"PeerLivenessDetection": {
						"Ref": "RouteServerPeerLivenessDetection"
					}
				},
				"PeerAddress": {
					"Fn::GetAtt": [
						"Fgt2Eni1",
						"PrimaryPrivateIpAddress"
					]
				},
				"RouteServerEndpointId": {
					"Ref": "RouteServerEndpoint2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"RouteServerPeer2"
								]
							]
						}
					}
				]
			}
		},
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "VPCCIDR"
				},
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"VPC"
								]
							]
						}
					}
				]
			}
		},
		"PublicSub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PublicSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PublicSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"PrivateSub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PrivateSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PrivateSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"HAMgmtSub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "HAMgmtSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"HAMgmtSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"PublicSub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PublicSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PublicSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"PrivateSub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PrivateSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PrivateSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"HAMgmtSub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "HAMgmtSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"HAMgmtSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"TgwAttachSub1": {
			"Type": "AWS::EC2::Subnet",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "TgwAttachSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TgwAttachSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"TgwAttachSub2": {
			"Type": "AWS::EC2::Subnet",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "TgwAttachSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TgwAttachSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"IGW"
								]
							]
						}
					}
				]
			}
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"TransitGateway": {
			"Type": "AWS::EC2::TransitGateway",
			"Condition": "CreateTgw",
			"Properties": {
				"AmazonSideAsn": 64512,
				"AutoAcceptSharedAttachments": "enable",
				"DefaultRouteTableAssociation": "disable",
				"DefaultRouteTablePropagation": "disable",
				"DnsSupport": "enable",
				"VpnEcmpSupport": "enable",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TGW"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySecurityVpcAttachment": {
			"Type": "AWS::EC2::TransitGatewayAttachment",
			"Condition": "CreateTgw",
			"Properties": {
				"SubnetIds": [
					{
						"Ref": "TgwAttachSub1"
					},
					{
						"Ref": "TgwAttachSub2"
					}
				],
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"security-vpc-attachment"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySecurityRtb": {
			"Type": "AWS::EC2::TransitGatewayRouteTable",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"security-tgw-rtb"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySpokeRtb": {
			"Type": "AWS::EC2::TransitGatewayRouteTable",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"spoke-tgw-rtb"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySecurityVpcAttachmentAssociation": {
			"Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "TransitGatewaySecurityVpcAttachment"
				},
				"TransitGatewayRouteTableId": {
					"Ref": "TransitGatewaySecurityRtb"
				}
			}
		},
		"TransitGatewayRoute1": {
			"Type": "AWS::EC2::TransitGatewayRoute",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "TransitGatewaySecurityVpcAttachment"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"TransitGatewayRouteTableId": {
					"Ref": "TransitGatewaySpokeRtb"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PublicRouteTable"
								]
							]
						}
					}
				]
			}
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PrivateRouteTable"
								]
							]
						}
					}
				]
			}
		},
		"TgwAttachRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TgwAttachRouteTable"
								]
							]
						}
					}
				]
			}
		},
		"VPCRoute1": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"VPCRoute2": {
			"Type": "AWS::EC2::Route",
			"Condition": "CreateTgw",
			"DependsOn": [
				"TransitGateway",
				"TransitGatewaySecurityVpcAttachment",
				"TransitGatewaySecurityVpcAttachmentAssociation"
			],
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				}
			}
		},
		"VPCRoute3": {
			"Type": "AWS::EC2::Route",
			"Condition": "ExistingTgw",
			"DependsOn": [
				"ExistingTransitGatewaySecurityVpcAttachment",
				"ExistingTransitGatewaySecurityVpcAttachmentAssociation"
			],
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"TransitGatewayId": {
					"Ref": "TgwExisting"
				}
			}
		},
		"SubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSub1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSub2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation3": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "HAMgmtSub1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation4": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "HAMgmtSub2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation5": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSub1"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation6": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSub2"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation7": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"SubnetId": {
					"Ref": "TgwAttachSub1"
				},
				"RouteTableId": {
					"Ref": "TgwAttachRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation8": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"SubnetId": {
					"Ref": "TgwAttachSub2"
				},
				"RouteTableId": {
					"Ref": "TgwAttachRouteTable"
				}
			}
		},
		"TgwApplianceMode": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Handler": "index.handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"ec2 = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        response = ec2.modify_transit_gateway_vpc_attachment(",
								"                TransitGatewayAttachmentId = event['ResourceProperties']['TgwInspectionVpcAttachmentId'],",
								"                Options = {'ApplianceModeSupport': event['ResourceProperties']['ApplianceMode']}",
								"            )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if response['ResponseMetadata']['HTTPStatusCode'] == 200 and response['TransitGatewayVpcAttachment'] != []:",
								"        tgw_status = response['TransitGatewayVpcAttachment']['Options']['ApplianceModeSupport']",
								"        logger.info('--> Current Tgw Status: {}'.format(tgw_status))",
								"        responseData = {'Tgw ApplianceMode Status': tgw_status}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to modify Tgw Attachment! {}'.format(response))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Runtime": "python3.12",
				"Timeout": 30
			}
		},
		"RunTgwApplianceModeNewTgw": {
			"Type": "Custom::RunTgwApplianceMode",
			"DependsOn": "TransitGatewayRoute1",
			"Condition": "CreateTgw",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"TgwApplianceMode",
						"Arn"
					]
				},
				"TgwInspectionVpcAttachmentId": {
					"Ref": "TransitGatewaySecurityVpcAttachment"
				},
				"ApplianceMode": "enable"
			}
		},
		"RunTgwApplianceModeExistingTgw": {
			"Type": "Custom::RunTgwApplianceMode",
			"DependsOn": "ExistingTransitGatewayRoute1",
			"Condition": "ExistingTgw",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"TgwApplianceMode",
						"Arn"
					]
				},
				"TgwInspectionVpcAttachmentId": {
					"Ref": "ExistingTransitGatewaySecurityVpcAttachment"
				},
				"ApplianceMode": "enable"
			}
		},
		"ExistingTransitGatewaySecurityVpcAttachment": {
			"Type": "AWS::EC2::TransitGatewayAttachment",
			"Condition": "ExistingTgw",
			"Properties": {
				"SubnetIds": [
					{
						"Ref": "TgwAttachSub1"
					},
					{
						"Ref": "TgwAttachSub2"
					}
				],
				"TransitGatewayId": {
					"Ref": "TgwExisting"
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"security-vpc-attachment"
								]
							]
						}
					}
				]
			}
		},
		"ExistingTransitGatewaySecurityVpcAttachmentAssociation": {
			"Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
			"Condition": "ExistingTgw",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "ExistingTransitGatewaySecurityVpcAttachment"
				},
				"TransitGatewayRouteTableId": {
					"Ref": "TgwExistingSecurityTgwRtb"
				}
			}
		},
		"ExistingTransitGatewayRoute1": {
			"Type": "AWS::EC2::TransitGatewayRoute",
			"Condition": "ExistingTgwRoute",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "ExistingTransitGatewaySecurityVpcAttachment"
				},
				"DestinationCidrBlock": {
					"Ref": "TgwExistingSpokeTgwRtbRoute"
				},
				"TransitGatewayRouteTableId": {
					"Ref": "TgwExistingSpokeTgwRtb"
				}
			}
		},
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Condition": "BYOL",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": "*",
							"Action": [
								"s3:GetObject"
							],
							"Resource": [
								"*"
							]
						}
					]
				},
				"RouteTableIds": [
					{
						"Ref": "PublicRouteTable"
					}
				],
				"ServiceName": {
					"Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
				},
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"VPCEndpointEC2": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Condition": "PrivateEC2API",
			"Properties": {
				"VpcEndpointType": "Interface",
				"PrivateDnsEnabled": true,
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIds": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SubnetIds": [
					{
						"Ref": "HAMgmtSub1"
					},
					{
						"Ref": "HAMgmtSub2"
					}
				],
				"ServiceName": {
					"Fn::Join": [
						"",
						[
							"com.amazonaws.",
							{
								"Ref": "AWS::Region"
							},
							".ec2"
						]
					]
				}
			}
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "FGCPPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "BootStrapFromS3",
									"Effect": "Allow",
									"Action": [
										"s3:GetObject"
									],
									"Resource": "*"
								},
								{
									"Sid": "Failover",
									"Effect": "Allow",
									"Action": [
										"ec2:AssociateAddress",
										"ec2:DescribeAddresses",
										"ec2:DescribeInstances",
										"ec2:DescribeRouteTables",
										"ec2:DescribeVpcEndpoints",
										"ec2:ReplaceRoute"
									],
									"Resource": "*"
								},
								{
									"Sid": "SDNConnectorFortiView",
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeNetworkInterfaces",
										"ec2:DescribeRegions",
										"eks:DescribeCluster",
										"eks:ListClusters",
										"inspector:DescribeFindings",
										"inspector:ListFindings"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FortiGateSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"GroupDescription": "FortigateSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FortiGateSecGrpHArule": {
			"DependsOn": "FortiGateSecGrp",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FortiGateSecGrp"
				},
				"Description": "Allow FGTs to access each other",
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FortiGateSecGrp"
				}
			}
		},
		"Fgt1": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "RunInitFunction1",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "2",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "30",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1Eni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1Eni1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1Eni2"
						},
						"DeviceIndex": "2"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiGate1"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::If": [
							"BYOL",
							{
								"Fn::Join": [
									"",
									[
										"{\n",
										"\"bucket\"",
										" : \"",
										{
											"Ref": "InitS3Bucket"
										},
										"\"",
										",\n",
										"\"region\"",
										" : ",
										"\"",
										{
											"Ref": "AWS::Region"
										},
										"\"",
										",\n",
										"\"license\"",
										" : ",
										"\"",
										"/",
										{
											"Ref": "FortiGate1LicenseFile"
										},
										"\"",
										",\n",
										"\"config\"",
										" : ",
										"\"",
										"/fgt1-config.txt\"",
										"\n",
										"}"
									]
								]
							},
							{
								"Fn::Join": [
									"\n",
									[
										"Content-Type: multipart/mixed; boundary='==Boundary=='",
										"MIME-Version: 1.0",
										"",
										"--==Boundary==",
										"Content-Type: text/x-shellscript; charset='us-ascii'",
										"MIME-Version: 1.0",
										"",
										{
											"Fn::GetAtt": [
												"RunInitFunction1",
												"fgt_config"
											]
										},
										"",
										{
											"Fn::If": [
												"FortiFlex",
												{
													"Fn::Join": [
														"\n",
														[
															"--==Boundary==",
															"Content-Type: text/plain; charset='us-ascii'",
															"MIME-Version: 1.0",
															"Content-Transfer-Encoding: 7bit",
															"Content-Disposition: attachment; filename='license'",
															"",
															{
																"Fn::Sub": "LICENSE-TOKEN: ${FortiGate1FortiFlexToken}"
															},
															""
														]
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"--==Boundary==--"
									]
								]
							}
						]
					}
				}
			}
		},
		"Fgt2": {
			"Type": "AWS::EC2::Instance",
			"DependsOn": "RunInitFunction2",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "2",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "30",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2Eni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2Eni1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2Eni2"
						},
						"DeviceIndex": "2"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiGate2"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::If": [
							"BYOL",
							{
								"Fn::Join": [
									"",
									[
										"{\n",
										"\"bucket\"",
										" : \"",
										{
											"Ref": "InitS3Bucket"
										},
										"\"",
										",\n",
										"\"region\"",
										" : ",
										"\"",
										{
											"Ref": "AWS::Region"
										},
										"\"",
										",\n",
										"\"license\"",
										" : ",
										"\"",
										"/",
										{
											"Ref": "FortiGate2LicenseFile"
										},
										"\"",
										",\n",
										"\"config\"",
										" : ",
										"\"",
										"/fgt2-config.txt\"",
										"\n",
										"}"
									]
								]
							},
							{
								"Fn::Join": [
									"\n",
									[
										"Content-Type: multipart/mixed; boundary='==Boundary=='",
										"MIME-Version: 1.0",
										"",
										"--==Boundary==",
										"Content-Type: text/x-shellscript; charset='us-ascii'",
										"MIME-Version: 1.0",
										"",
										{
											"Fn::GetAtt": [
												"RunInitFunction2",
												"fgt_config"
											]
										},
										"",
										{
											"Fn::If": [
												"FortiFlex",
												{
													"Fn::Join": [
														"\n",
														[
															"--==Boundary==",
															"Content-Type: text/plain; charset='us-ascii'",
															"MIME-Version: 1.0",
															"Content-Transfer-Encoding: 7bit",
															"Content-Disposition: attachment; filename='license'",
															"",
															{
																"Fn::Sub": "LICENSE-TOKEN: ${FortiGate2FortiFlexToken}"
															},
															""
														]
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"--==Boundary==--"
									]
								]
							}
						]
					}
				}
			}
		},
		"Fgt1Eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGate1PublicIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"Fgt2Eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt2eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGate2PublicIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"ClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"ClusterEIP"
								]
							]
						}
					}
				]
			}
		},
		"Fgt1EIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "PublicEC2API",
			"Properties": {
				"Domain": "vpc",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"Fgt1-HAMgmtEIP"
								]
							]
						}
					}
				]
			}
		},
		"Fgt2EIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "PublicEC2API",
			"Properties": {
				"Domain": "vpc",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"Fgt2-HAMgmtEIP"
								]
							]
						}
					}
				]
			}
		},
		"ClusterIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"ClusterEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt1Eni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1PublicIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": [
				"Fgt1",
				"Fgt1Eni0",
				"ClusterEIP"
			]
		},
		"Fgt1Eni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni1"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1PrivateIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt2Eni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt2eni1"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate2PrivateIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt1Eni2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAMgmtSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni2"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1HAmgmtIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt2Eni2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAMgmtSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt2eni2"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate2HAmgmtIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt1EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "PublicEC2API",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"Fgt1EIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt1Eni2"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1HAmgmtIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": [
				"Fgt1",
				"Fgt1Eni2",
				"Fgt1EIP"
			]
		},
		"Fgt2EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "PublicEC2API",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"Fgt2EIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt2Eni2"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate2HAmgmtIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": [
				"Fgt2",
				"Fgt2Eni2",
				"Fgt2EIP"
			]
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3AccessRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeImages",
										"ec2:DescribeNetworkInterfaces",
										"ec2:DescribeTransitGatewayVpcAttachments",
										"ec2:DescribeVpcEndpointServiceConfigurations",
										"ec2:DescribeVpcEndpointServicePermissions",
										"ec2:DescribeVpcEndpointServices",
										"ec2:ModifyTransitGatewayVpcAttachment",
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents",
										"s3:PutObject"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"ImageFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        searchString = event['ResourceProperties']['SearchString']",
								"        productCode =  event['ResourceProperties']['ProductCode']",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = client.describe_images(",
								"            Filters=[{'Name': 'name', 'Values': [searchString]}, {'Name': 'product-code', 'Values': [productCode]}],",
								"            Owners=['aws-marketplace']",
								"        )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:",
								"        ami_dict = {}",
								"        ami_list = []",
								"        for entry in resp['Images']:",
								"            key = entry['CreationDate']",
								"            ami_dict[key] = entry['ImageId']",
								"        ami_list = sorted(ami_dict, reverse = True)",
								"        logger.info('--> found latest AMI: {}, {}, {} {}'.format(ami_dict[ami_list[0]], ami_list[0], searchString, productCode))",
								"        responseData = {'ami': ami_dict[ami_list[0]]}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to find AMI {} {} in describe_images response! {}'.format(searchString, productCode, resp))",
								"        responseData = {'msg':'Unable to find AMI {} {} in describe_images response! {}'.format(searchString, productCode,resp)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.12",
				"MemorySize": 128
			}
		},
		"RunImageFunction": {
			"Type": "Custom::ImageFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"ImageFunction",
						"Arn"
					]
				},
				"SearchString": {
					"Fn::If": [
						"Graviton",
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSArmAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						},
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSIntelAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				"ProductCode": {
					"Fn::If": [
						"Graviton",
						{
							"Fn::Select": [
								"1",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSArmAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						},
						{
							"Fn::Select": [
								"1",
								{
									"Fn::Split": [
										"|",
										{
											"Fn::FindInMap": [
												"FortiOSIntelAMISearchString",
												{
													"Ref": "FortiOSVersion"
												},
												{
													"Ref": "LicenseType"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"s3 = boto3.client('s3')",
								"",
								"template = '''\\",
								"config system vdom-exception",
								"edit 1",
								"set object system.interface",
								"next",
								"edit 2",
								"set object router.bgp",
								"next",
								"edit 3",
								"set object router.static",
								"next",
								"end",
								"config system settings",
								"set allow-subnet-overlap enable",
								"end",
								"config system global",
								"set hostname {Hostname}",
								"set admintimeout 60",
								"end",
								{
									"Fn::If": [
										"PrivateEC2API",
										{
											"Fn::Join": [
												"\n",
												[
													"config system dns",
													"set primary 169.254.169.253",
													"unset secondary",
													"unset protocol",
													"unset server-select-method",
													"end"
												]
											]
										},
										{
											"Ref": "AWS::NoValue"
										}
									]
								},
								"config system interface",
								"edit port1",
								"set alias public",
								"set mode static",
								"set ip {Port1IP}",
								"set allowaccess ping https",
								"set secondary-IP enable",
								"next",
								"edit port2",
								"set alias private",
								"set mode static",
								"set ip {Port2IP}",
								"set allowaccess ping https",
								"set mtu-override enable",
								"set mtu 9001",
								{
									"Fn::If": [
										"UseBFD",
										{
											"Fn::Join": [
												"\n",
												[
													"set bfd enable",
													"set bfd-desired-min-tx 300"
												]
											]
										},
										{
											"Ref": "AWS::NoValue"
										}
									]
								},
								"next",
								"edit port3",
								"set alias hamgmt",
								"set mode static",
								"set ip {Port3IP}",
								"set allowaccess ping https",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"end",
								"config router static",
								"edit 1",
								"set device port1",
								"set gateway {PublicSubnetRouterIP}",
								"set comment default-route",
								"next",
								"edit 2",
								"set dst {VPCCIDR}",
								"set device port2",
								"set gateway {PrivateSubnetRouterIP}",
								"set comment vpc-route",
								"next",
								{
									"Fn::If": [
										"CreateTgwAttachSubnets",
										{
											"Fn::Join": [
												"\n",
												[
													"edit 3",
													"set dst 10.0.0.0/8",
													"set device port2",
													"set gateway {PrivateSubnetRouterIP}",
													"set comment rfc1918-class-a-route",
													"next",
													"edit 4",
													"set dst 172.16.0.0/12",
													"set device port2",
													"set gateway {PrivateSubnetRouterIP}",
													"set comment rfc1918-class-b-route",
													"next",
													"edit 5",
													"set dst 192.168.0.0/16",
													"set device port2",
													"set gateway {PrivateSubnetRouterIP}",
													"set comment rfc1918-class-c-route",
													"next"
												]
											]
										},
										{
											"Ref": "AWS::NoValue"
										}
									]
								},
								"end",
								"config router bgp",
								"set as {FgtBgpAsn}",
								"set router-id {RouterID}",
								"set ebgp-multipath enable",
								"config neighbor",
								"edit {RouteServerEndpointIP}",
								"set remote-as {RouteServerBgpAsn}",
								"set advertisement-interval 1",
								"set capability-default-originate enable",
								"set keep-alive-timer 1",
								"set holdtime-timer 3",
								"set connect-timer 3",
								{
									"Fn::If": [
										"UseBFD",
										{
											"Fn::Join": [
												"\n",
												[
													"set bfd enable"
												]
											]
										},
										{
											"Ref": "AWS::NoValue"
										}
									]
								},
								"next",
								"end",
								"end",
								"config firewall policy",
								"edit 1",
								"set name outbound-all",
								"set srcintf port2",
								"set dstintf port1",
								"set srcaddr all",
								"set dstaddr all",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set logtraffic all",
								"set nat enable",
								"next",
								"end",
								"config system sdn-connector",
								"edit aws-instance-role",
								"set status enable",
								"set type aws",
								"set use-metadata-iam enable",
								"set alt-resource-ip enable",
								"next",
								"end",
								"config system ha",
								"set group-name group1",
								"set mode a-p",
								"set hbdev port3 50",
								"set session-pickup enable",
								"set ha-mgmt-status enable",
								"config ha-mgmt-interface",
								"edit 1",
								"set interface port3",
								"set gateway {HAmgmtSubnetRouterIP}",
								"next",
								"end",
								"set override disable",
								"set priority {HApriority}",
								"set unicast-hb enable",
								"set unicast-hb-peerip {HApeer}",
								"set ha-uptime-diff-margin 60",
								"set route-ttl 30",
								{
									"Fn::Join": [
										"",
										[
											"set password ",
											{
												"Fn::Base64": {
													"Ref": "AWS::AccountId"
												}
											}
										]
									]
								},
								"end",
								"\\",
								"'''",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        dict = ast.literal_eval(event['ResourceProperties']['FGTInfo'])",
								"        fgt_config = template.format(**dict)",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								{
									"Fn::If": [
										"BYOL",
										{
											"Fn::Join": [
												"\n",
												[
													"    try:",
													"        response = s3.put_object(Body=fgt_config, Bucket=event['ResourceProperties']['S3Bucket'], Key=event['ResourceProperties']['S3Key'])",
													"    except Exception as error:",
													"        logger.error('<--!! Exception: {}'.format(error))",
													"        responseData = {'msg':'Exception: {}'.format(error)}",
													"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
													"        return None",
													"",
													"    if response['ResponseMetadata']['HTTPStatusCode'] == 200:",
													"        logger.info('<-- s3 put_object {} successful'.format(event['ResourceProperties']['S3Key']))",
													"        responseData = {'fgt_config':fgt_config}",
													"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
													"    else:",
													"        responseData = {'msg':'error'}",
													"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
													""
												]
											]
										},
										{
											"Fn::Join": [
												"\n",
												[
													"    responseData = {'fgt_config':fgt_config}",
													"    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
													""
												]
											]
										}
									]
								}
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.12",
				"MemorySize": 128
			}
		},
		"RunInitFunction1": {
			"Type": "Custom::InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"S3Key": "fgt1-config.txt",
				"FGTInfo": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAmgmtSubnetRouterIP':'",
							{
								"Ref": "HAMgmtSubnet1RouterIP"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnet1RouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnet1RouterIP"
							},
							"',",
							"'Port1IP':'",
							{
								"Ref": "FortiGate1PublicIP"
							},
							"',",
							"'Port2IP':'",
							{
								"Ref": "FortiGate1PrivateIP"
							},
							"',",
							"'Port3IP':'",
							{
								"Ref": "FortiGate1HAmgmtIP"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiGate2HAmgmtIP"
											}
										]
									}
								]
							},
							"',",
							"'FgtBgpAsn':'",
							{
								"Ref": "FgtBgpAsn"
							},
							"',",
							"'RouterID':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiGate1PrivateIP"
											}
										]
									}
								]
							},
							"',",
							"'RouteServerBgpAsn':'",
							{
								"Ref": "RouteServerBgpAsn"
							},
							"',",
							"'RouteServerEndpointIP':'",
							{
								"Fn::GetAtt": [
									"RouteServerEndpoint1",
									"EniAddress"
								]
							},
							"',",
							"'HApriority':'255',",
							"'Hostname':'Fgt1'",
							"}"
						]
					]
				}
			}
		},
		"RunInitFunction2": {
			"Type": "Custom::InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"S3Key": "fgt2-config.txt",
				"FGTInfo": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAmgmtSubnetRouterIP':'",
							{
								"Ref": "HAMgmtSubnet2RouterIP"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnet2RouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnet2RouterIP"
							},
							"',",
							"'Port1IP':'",
							{
								"Ref": "FortiGate2PublicIP"
							},
							"',",
							"'Port2IP':'",
							{
								"Ref": "FortiGate2PrivateIP"
							},
							"',",
							"'Port3IP':'",
							{
								"Ref": "FortiGate2HAmgmtIP"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiGate1HAmgmtIP"
											}
										]
									}
								]
							},
							"',",
							"'FgtBgpAsn':'",
							{
								"Ref": "FgtBgpAsn"
							},
							"',",
							"'RouterID':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiGate2PrivateIP"
											}
										]
									}
								]
							},
							"',",
							"'RouteServerBgpAsn':'",
							{
								"Ref": "RouteServerBgpAsn"
							},
							"',",
							"'RouteServerEndpointIP':'",
							{
								"Fn::GetAtt": [
									"RouteServerEndpoint2",
									"EniAddress"
								]
							},
							"',",
							"'HApriority':'1',",
							"'Hostname':'Fgt2'",
							"}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the Fortigates"
		},
		"Password": {
			"Value": {
				"Ref": "Fgt1"
			},
			"Description": "Initial password for the FortiGates"
		},
		"ClusterLoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "ClusterEIP"
						}
					]
				]
			},
			"Description": "Login URL for the public interface of the active FortiGate"
		},
		"FortiGate1LoginURL": {
			"Value": {
				"Fn::If": [
					"PrivateEC2API",
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Fn::Select": [
										"0",
										{
											"Fn::Split": [
												"/",
												{
													"Ref": "FortiGate1HAmgmtIP"
												}
											]
										}
									]
								}
							]
						]
					},
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Ref": "Fgt1EIP"
								}
							]
						]
					}
				]
			},
			"Description": "Login URL for the HAmgmt interface of FortiGate1"
		},
		"FortiGate2LoginURL": {
			"Value": {
				"Fn::If": [
					"PrivateEC2API",
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Fn::Select": [
										"0",
										{
											"Fn::Split": [
												"/",
												{
													"Ref": "FortiGate2HAmgmtIP"
												}
											]
										}
									]
								}
							]
						]
					},
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Ref": "Fgt2EIP"
								}
							]
						]
					}
				]
			},
			"Description": "Login URL for the HAmgmt interface of FortiGate2"
		},
		"TransitGateway": {
			"Value": {
				"Ref": "TransitGateway"
			},
			"Condition": "CreateTgw",
			"Description": "Transit Gateway ID, for use in spoke template"
		},
		"TransitGatewaySecurityRtb": {
			"Value": {
				"Ref": "TransitGatewaySecurityRtb"
			},
			"Condition": "CreateTgw",
			"Description": "Transit Gateway Route Table ID that the security VPC is associated to, for use in spoke template"
		},
		"TransitGatewaySpokeRtb": {
			"Value": {
				"Ref": "TransitGatewaySpokeRtb"
			},
			"Condition": "CreateTgw",
			"Description": "Transit Gateway Route Table ID that the spoke VPCs will associate to, for use in spoke template"
		},
		"ExistingTransitGateway": {
			"Value": {
				"Ref": "TgwExisting"
			},
			"Condition": "ExistingTgw",
			"Description": "Existing Transit Gateway ID, for use in spoke template"
		},
		"ExistingTransitGatewaySecurityRtb": {
			"Value": {
				"Ref": "TgwExistingSecurityTgwRtb"
			},
			"Condition": "ExistingTgw",
			"Description": "Existing Transit Gateway Route Table ID that the security VPC is associated to, for use in spoke template"
		},
		"ExistingTransitGatewaySpokeRtb": {
			"Value": {
				"Ref": "TgwExistingSpokeTgwRtb"
			},
			"Condition": "ExistingTgw",
			"Description": "Existing Transit Gateway Route Table ID that the spoke VPCs will associate to, for use in spoke template"
		}
	}
}